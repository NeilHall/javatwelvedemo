plugins {
	id 'org.springframework.boot' version '2.1.4.RELEASE'
	id 'java'
	id 'jacoco'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '12'
targetCompatibility = '12'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-integration'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jacoco {
	toolVersion = "0.8.3"
}

jacocoTestReport {

	reports {
		html.enabled true
		xml.enabled true
		csv.enabled true
	}

//	sourceDirectories.from = sourceSets.main.java.sourceDirectories
//	classDirectories.from = files(sourceSets.main.java.outputDir)
//	executionData.from = files("$buildDir/jacoco/test.exec")
//
//	def fileFilter = ['**/DemoApplication**']
//	def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)

	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: '**/DemoApplication**')
		})
//				{
//			fileTree(dir: it, exclude: '**/DemoApplication**')
//		}

	}
}


